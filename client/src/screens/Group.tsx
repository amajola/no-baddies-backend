/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/0WZnWHXHkJo
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import {
  Card,
  CardHeader,
  CardTitle,
  CardDescription,
  CardContent,
  CardFooter,
} from "@/components/ui/card";
import Label from "@/components/ui/label";
import Input from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { hc } from "hono/client";
import { useNavigate } from "react-router-dom";
import { useForm } from "@tanstack/react-form";
import { zodValidator } from "@tanstack/zod-form-adapter";
import z from "zod";
import { AppType } from "server";
import { useAtom } from "jotai";
import { AuthorizationAtom, UserAtom } from "@/state";

const CreateGroup = () => {
  const navigate = useNavigate();
  const [auth] = useAtom(AuthorizationAtom);
  const [user, setUser] = useAtom(UserAtom);
  const client = hc<AppType>("http://localhost:3000/", {
    headers: { Authorization: `Bearer ${auth}` },
  });

  console.log(user);
  const form = useForm({
    defaultValues: {
      name: "",
    },
    onSubmit: async ({ value, formApi }) => {
      const response = await client.groups.create.$post({ json: value });
      if (response.ok) {
        const data = await response.json();
        user?.groups.push(...data);
        setUser(user);
        navigate("/");
      }
      if (response.status === 401) {
        formApi.state.fieldMeta.name.errors.push("Group name already exists");
      }
    },
  });

  return (
    <div className="flex flex-col h-[100dvh] w-[100dvw]">
      <div className="flex-1 flex items-center justify-center">
        <form
          onSubmit={(e) => {
            e.preventDefault();
            e.stopPropagation();
            form.handleSubmit();
          }}
        >
          <Card className="w-full max-w-md p-6">
            <CardHeader>
              <CardTitle className="text-2xl">Create a Group</CardTitle>
              <CardDescription>
                Create a new group to connect with friends and share content.
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="password">Group Name</Label>
                <form.Field
                  name="name"
                  validatorAdapter={zodValidator()}
                  validators={{ onChange: z.string().min(8) }}
                  children={(field) => (
                    <>
                      <Input
                        id="name"
                        type="string"
                        placeholder="My Awesome Group"
                        name={field.name}
                        value={field.state.value}
                        onChange={(e) => field.handleChange(e.target.value)}
                        required
                      />
                      {field.state.meta.errors ? (
                        <em
                          role="alert"
                          className="text-xs text-right text-red-600"
                        >
                          {field.state.meta.errors.join(", ")}
                        </em>
                      ) : null}
                    </>
                  )}
                />
              </div>
            </CardContent>
            <CardFooter>
              <Button className="w-full">Create Group</Button>
            </CardFooter>
          </Card>
        </form>
      </div>
    </div>
  );
};

export default CreateGroup;
